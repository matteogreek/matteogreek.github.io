[{"authors":null,"categories":null,"content":"Greetings! I am a Master’s Degree student in Computer Science, specializing in Cyber Security at the University of Trento. I am an inquisitive person, eager to learn new skills and always seeking new topics to explore. I recently completed an internship at SAP Security Research, where I contributed to the development of an automated tool for mining vulnerabilities in open source software repositories. Currently, I am working on my Master’s thesis, focusing on the same topic that I explored during my internship.\nWhile I am relatively new to Capture The Flag exercises, I enjoy delving into their challenges and learning new technologies. In addition to these, I’ve also started doing some SOC exercises to further enhance my skill set. I share my journey through the notes I take and the writeups I create, documenting my experiences and discoveries.\nMy research interests include a wide range of topics such as open source software, software vulnerabilities, mining repositories, software-defined networking, and cybercrime. Beyond cybersecurity, my passion lies in wildlife conservation, with a particular focus on primates. I am particularly intrigued by research methodologies involving automated detection techniques against wildlife poaching activities. Although I promise not to write code with the same quality as a monkey would, I embrace a playful and creative approach to problem-solving.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Greetings! I am a Master’s Degree student in Computer Science, specializing in Cyber Security at the University of Trento. I am an inquisitive person, eager to learn new skills and always seeking new topics to explore.","tags":null,"title":"Matteo Greco","type":"authors"},{"authors":null,"categories":null,"content":"Welcome to my personal page dedicated to SOC Analyst exercises! Here, you will find a collection of in-depth writeups for various challenges from both LetsDefend and CyberDefenders.\nLetsDefend SOC147 - SSH Scan Activity SOC163 - Suspicious Certutil.exe Usage SOC202 - FakeGPT Malicious Chrome Extension ","date":1692576e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1692576e3,"objectID":"7151d54334bf798441627dd33c57fd41","permalink":"https://matteogreek.github.io/project/letsdefend/","publishdate":"2023-08-21T00:00:00Z","relpermalink":"/project/letsdefend/","section":"project","summary":"list of writeups of LetsDefend and CyberDefenders challenges","tags":["Writeups"],"title":"SOC Writeups","type":"project"},{"authors":null,"categories":null,"content":"Task 1: Find the password! In this challenge, you are asked to solve a simple reversing solution. Download and analyze the binary to discover the password.\nThere may be anti-reversing measures in place!\nAfter downloading the attached task file, we can start analyzing it.\nTo discover what type of file we are dealing with we run file command followed by the name of the file.\n$ file 0x41haz.0x41haz 0x41haz.0x41haz: ELF 64-bit MSB *unknown arch 0x3e00* (SYSV) We discovered that this is a ELF 64bit executable file type but it seems that there are some obfuscation technique in place: MSB unknown arch 0x3e00 (SYSV)\nGoogling it we can find that to bypass this we can patch the sixth byte from 0x02 to 0x01. To perform this we can use hexedit to change the specific byte.\nAfter changing the sixth byte we get the following:\n0x41haz.0x41haz: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=6c9f2e85b64d4f12b91136ffb8e4c038f1dc6dcd, for GNU/Linux 3.2.0, stripped It’s time to analyze the file with Ghidra and see what we can discover. Looking at the functions we discover the below decoded function.\nundefined8 FUN_00101165(void) { size_t sVar1; char local_48 [42]; undefined8 local_1e; undefined4 local_16; undefined2 local_12; int local_10; int local_c; local_1e = 0x6667243532404032; local_16 = 0x40265473; local_12 = 0x4c; puts(\u0026#34;=======================\\nHey , Can You Crackme ?\\n=======================\u0026#34;); puts(\u0026#34;It\\\u0026#39;s jus a simple binary \\n\u0026#34;); puts(\u0026#34;Tell Me the Password :\u0026#34;); gets(local_48); sVar1 = strlen(local_48); local_10 = (int)sVar1; if ((int)sVar1 != 0xd) { puts(\u0026#34;Is it correct , I don\\\u0026#39;t think so.\u0026#34;); /* WARNING: Subroutine does not return */ exit(0); } local_c = 0; while( true ) { if (0xc \u0026lt; local_c) { puts(\u0026#34;Well Done !!\u0026#34;); return 0; } if (*(char *)((long)\u0026amp;local_1e + (long)local_c) != local_48[local_c]) break; local_c = local_c + 1; } puts(\u0026#34;Nope\u0026#34;); /* WARNING: Subroutine does not return */ exit(0); } We found some hex strings, lets decode them using xxd:\necho 0x6667243532404032 | xxd -r echo 0x40265473 | xxd -r echo 0x4c | xxd -r local_1e = 0x6667243532404032; -\u0026gt; fg$52@@2\nlocal_16 = 0x40265473; -\u0026gt; @\u0026amp;Ts\nlocal_12 = 0x4c; -\u0026gt; L\nconcatenate them and try the resulting string as input for the password.\nfg$52@@2@\u0026amp;TsL\nLet’s reverse the hex strings to follow the little-endian format and try again.\necho 0x6667243532404032 | xxd -r | rev echo 0x40265473 | xxd -r | rev echo 0x4c | xxd -r | rev 2@@25$gfsT\u0026amp;@L\nHurray!\nHeartstone back to home\n","date":1691107200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691107200,"objectID":"037d3d05d0a56522134055374fdf6e02","permalink":"https://matteogreek.github.io/writeups/thm/0x41haz_writeup/","publishdate":"2023-08-04T00:00:00Z","relpermalink":"/writeups/thm/0x41haz_writeup/","section":"writeups","summary":"Simple Reversing Challenge","tags":["writeup"],"title":"0x41haz","type":"writeups"},{"authors":null,"categories":null,"content":"Task1 Some sensitive code was leaked and committed to a GitHub repository. The goal is to find what was committed.\nQuestion 1 Discover the flag in the repository!\nStart by deploying the machine attached to the room to access the the files we need. Inside the machine we find committed.zip.\nWe know that we need to find some leaked information on some accidental commit. To know all the past commit to a git repository we can type:\ngit log –reflog\nwhere reflog is a record of all commits that were referenced in the repo at any time.\nLooking through the results one commit stand out with the message text set as Oops. To show the content of the commit we can use the command:\ngit show \u0026lt;hash\u0026gt;\nwhere \u0026lt;hash\u0026gt; is the hash of the commit that we want to show. It’s easy now to find the string with the flag.\nAnswer: flag{a489a9dbf8eb9d37c6e0cc1a92cda17b} Hurray!\nHeartstone back home\n","date":1691107200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691107200,"objectID":"0a0e2110b21efdfbdc6c5049f2b05bb1","permalink":"https://matteogreek.github.io/writeups/thm/committed_writeup/","publishdate":"2023-08-04T00:00:00Z","relpermalink":"/writeups/thm/committed_writeup/","section":"writeups","summary":"sensitive information in public repository","tags":["writeup"],"title":"Committed","type":"writeups"},{"authors":null,"categories":null,"content":"Welcome to my personal page dedicated to CTFs! Here, you will find a collection of in-depth writeups for various cybersecurity challenges from both TryHackMe rooms and HackTheBox CTF boxes.\nTryHackMe 0x41haz KAPE OhSINT Committed Mr.Phisher ","date":1691107200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691107200,"objectID":"3cbd653d89b954df60cd071557cbfdad","permalink":"https://matteogreek.github.io/project/ctfs/","publishdate":"2023-08-04T00:00:00Z","relpermalink":"/project/ctfs/","section":"project","summary":"list of writeups of THM and HTB boxes","tags":["Writeups"],"title":"CTFs Writeups","type":"project"},{"authors":null,"categories":null,"content":"Introduction to KAPE As reported on task 2 of the room:\nKroll Artifact Parser and Extractor (KAPE) parses and extracts Windows forensics artifacts. It is a tool that can significantly reduce the time needed to respond to an incident by providing forensic artifacts from a live system or a storage device much earlier than the imaging process completes.\nKAPE serves two primary purposes, 1) collect files and 2) process the collected files as per the provided options. For achieving these purposes, KAPE uses the concept of targets and modules. Targets can be defined as the forensic artifacts that need to be collected. Modules are programs that process the collected artifacts and extract information from them. We will learn about them in the upcoming tasks.\nTask 3,4,5,6 explain how the tool works, terminology and a quick example of how to setup.\nLet’s focus on task 7 with the Hands-on Challenge.\nHands-on Challenge The scenario is the following:\nOrganization X has an Acceptable Use Policy for their Portable Devices, including Laptops. This policy forbids users from connecting removable or Network drives, installing software from unknown locations, and connecting to unknown networks. It looks like one of the users has violated this policy. Can you help Organization X find out if the user violated the Acceptable Use Policy on their device?\nSetup the tool Let’s start by executing gkape.exe for using the tool with the GUI. Once the application has started we can fill the required parameters. Specifically we have to select the Target options and the Model options. Starting from the target we select:\nTarget source: the path to were we want to perform the forensics (e.g C:) Target destination: the path were the files will be copied (e.g ~Desktop\\kape) Targets: select the various collected artifacts. We are interested in connections of removable or network drives, connection to networks and installation of software as stated in the policy above. So we can search and add the artifacts related to the USB logs (since we need that info for one question) and KapeTriage which collects all the data that have to do with Registry, System files and more. On Module options:\nModule source: tipically the same path of the target destination (leave blank) Module destination: path to were the output is saved.e.g ~Desktop\\output) Modules: select the various module to use for processing the targets. Here we can select the Eric Zimmerman provided parsers. We are now ready to click execute and let Kape do the magic!\nQuestion 1 We need to find the Serial Number of the other USB Device that was connected to the device. To discover it we search in the output folder generated by Kape. Inside the Registry directory we can find several .csv files. The one we are looking for is called DeviceClasses.csv which contains the devices that were connected to the machine. We can identify the USB by looking at the type column and searching the 2 USB devices.\nThe serial number of the USB is the following: 1C6F654E59A3B0C179D366AE Question 2 We need to find the drive letter and path of the directory from where 7zip, Google Chrome and Mozilla Firefox were installed giving that they come from a network drive location.\nNavigate to Output/FileFloderAccess/automaticDestination.csv to analyze all the file that has been accessed and view the path from which programs were installed.\nAnswer: Z:\\Setups Question 3 The next question asks us to find the execution date and time of CHROMESETUP.EXE. To answer we can navigate to Registry/RecentApps.csv where all recent applications are registered.\nAnswer: 11/25/2021 03:33 Question 4 What search query was run on the system? Always inside the Registry folder we can look at WordWheelQuery.csv to know which queries were run on the system.\nAnswer: RunWallpaperSetup.cmd Question 5 Next question is about when was the network named Network 3 First connected. We can find this information inside Registry/KnownNetworks.csv from there we can see Network 3 first and last connection time.\nAnswer: 11/30/2021 15:44 Question 6 The last question is what removable drive was KAPE copied from. As before we can identify the path inside FileFloderAccess/AutomaticDestination.csv\nAnswer: E: Hurray!\nHeartstone back to home\n","date":1691107200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691107200,"objectID":"c7b588539c32d76e43f9f8656fad48ca","permalink":"https://matteogreek.github.io/writeups/thm/kape_writeup/","publishdate":"2023-08-04T00:00:00Z","relpermalink":"/writeups/thm/kape_writeup/","section":"writeups","summary":"tool that parses and extracts Windows forensics artifacts","tags":["writeup"],"title":"KAPE","type":"writeups"},{"authors":null,"categories":null,"content":"Task1 Deploy the machine attached to the room to access the files.\nQuestion 1 Uncover the flag in the email attachment!\nThe task of the room says that the document attached to a suspicious email keeps asking to enable macros. We can use this information as a guide for starting the research of the flag. We can deduce that some kind of useful information is related to the document’s macros.\nFirst of all let’s open the file called MrPhisher.docm with LibreOffice. Then to see what macros are set for the document go to Tools \u0026gt; Macros \u0026gt; Edit Macros. Under Modules we can see NewMacro, if we open it we see the macro related of MrPhisher.doc.\nWe can note that it’s a macro written in Visual Basic. For simplicity we can easily convert the code to python.\nThe code is straightforward, each element of the array is xor-ed with the relative index of that element. The result is casted to char to form the final output.\nLet’s run it and see what the result is. Oh wait it’s the flag!\nAnswer: flag{a39a07a239aacd40c948d852a5c9f8d1} Hurray!\nHeartstone back home\n","date":1691107200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691107200,"objectID":"bebe919c4aa0d93b39a2840b745cea46","permalink":"https://matteogreek.github.io/writeups/thm/mrphisher_writeup/","publishdate":"2023-08-04T00:00:00Z","relpermalink":"/writeups/thm/mrphisher_writeup/","section":"writeups","summary":"Phishing email containing suspicious attachment","tags":["writeup"],"title":"Mr. Phisher","type":"writeups"},{"authors":null,"categories":null,"content":"Task1 What information can you possible get with just one photo?\nQuestion 1 What profile picture does this user have?\nLet’s start by downloading the task files. We can see that the file attached to this room is an image called WindowsXP.jpg. Let’s run exiftool to analyze the metadata of the file and see if we can find some useful information.\nBy looking at the result, under the copyright data we can take note of a what it seems a username (OWoodflint). Since the goal of the room is learn what is OSINT we have to proceed and search on the web the username we just found to obtain publicly available information about the target.\nThere are many ways to do it, one is by using sherlock or other OSINT tools that automate the process of finding usernames across many social networks.\nTo perform the actual search we can type the following command where –timeout is the time (in seconds) to wait for response to requests. A longer timeout will increase the likelihood of getting results from slow sites but on the other hand, this may result in a long delay in gathering all the results.\npython3 sherlock.py OWoodflint –timeout 15\nThere are multiple accounts with that username registered on various websites, some of which may not belong to the individual we are looking for. Let’s start by looking at the twitter account. By opening the target’s profile we can answer what the profile picture this account has.\nAnswer: cat Question 2 What city is this person in?\nLooking at the target’s profile we can observe that one tweet contains the BSSID of one of his neighbors. The BSSID or Basic Service Set Identifier is a unique 48-bit label associated with an individual access point. With this information we can use Wigle.net which is a website that collects location and other data from wireless networks worldwide. Volunteers gather this data by downloading an app to their phones, which registers all APs they meet as well as their GPS coordinates. All of this information is then uploaded into the database. This data is then displayed to viewers on the website. Let’s try to locate our target. Navigate to Wigle.net and enter the BSSID found on twitter. The result is an address where the city is the answer.\nAnswer: London Question 3 Whats the SSID of the WAP he connected to?\nTo answer just look at the result we obtained on Wigle.net for the previous question. In addition to the location there is also the SSID we are looking for.\nAnswer: UnileverWiFi Question 4 What is his personal email address?\nWe have to search on other websites to answer this. Let’s open the github account related to the same username. We can see a public repository called people_finder. On the README.md file there is the email address.\nAnswer: OWoodflint@gmail.com Question 5 What site did you find his email address on?\nThe name of the site where we found the email address.\nAnswer: Github Question 6 Where has he gone on holiday?\nBy googling OWoodflint there is a wordpress website where we can find more information. On the mainpage of the blog there is a post where the author says where he is right now.\nAnswer: New York Question 7 What is this persons password?\nTo answer this we need to view the source code of the websites. Looking at the code we can try and search for keywords like ‘psw’, ‘password’ or similar but nothing pops out. looking at the body of the page we can notice a paragraph with the color set to white where the text is a strange string which is the final answer.\nAnswer: pennYDr0pper.! Hurray!\nHeartstone back home\n","date":1691107200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691107200,"objectID":"0cfa2b6db9f2f352cbe3b3a546ba0ad7","permalink":"https://matteogreek.github.io/writeups/thm/ohsint_writeup/","publishdate":"2023-08-04T00:00:00Z","relpermalink":"/writeups/thm/ohsint_writeup/","section":"writeups","summary":"Open Source Intelligence simple task","tags":["writeup"],"title":"OhSINT","type":"writeups"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1e8b51b3c626d521e33a669020b610e9","permalink":"https://matteogreek.github.io/project/autonet/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/autonet/","section":"project","summary":"Visual interface to pre-configure and run a network of VMs/containers and OpenVSwitches with the aim of automating the deployment of network setups","tags":["Networking"],"title":"AutoNet","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"071ad1797fa86daf826222abd13bf4f8","permalink":"https://matteogreek.github.io/project/comnetsemu/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/comnetsemu/","section":"project","summary":"Deployment and evaluation of containerized tools for network performance measurement in softwarized networks","tags":["Networking"],"title":"Network measurements in ComNetsEmu","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ecccd9be91e82efc2e2d185224458bf2","permalink":"https://matteogreek.github.io/project/sdn/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/sdn/","section":"project","summary":"Implementation of a network slicing approach to enable dynamic activation/de-activation of network slices via CLI/GUI commands","tags":["Networking"],"title":"On Demand SDN Slices in ComNetsEmu","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"99ab6ffe0f6eb9eaebd9df4907beafd6","permalink":"https://matteogreek.github.io/project/a-star/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/a-star/","section":"project","summary":"Implementation of the A-star parallel algorithm developed for the High Performance Computing course","tags":["Others"],"title":"Parallel A-star","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2ab8ac8aa1e098a3058feeb548405b8a","permalink":"https://matteogreek.github.io/project/prospector/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/prospector/","section":"project","summary":"Tool to find security fixes for known vulnerabilities in open source software repositories","tags":["Mining"],"title":"Prospector","type":"project"},{"authors":null,"categories":null,"content":"Alert EventID : 94 Event Time : Jun, 13, 2021, 04:23 PM Rule : SOC147 - SSH Scan Activity Level : Security Analyst Source Address : 172.16.20.5 Source Hostname : PentestMachine File Name : nmap File Hash : 3361bf0051cc657ba90b46be53fe5b36 File Size : 2.82 MB Device Action : Allowed Download (Password:infected) : https://files-ld.s3.us-east-2.amazonaws.com/3361bf0051cc657ba90b46be53fe5b36.zip Analysis Hostname: PentestMachine IP Address: 172.16.20.5\nTerminal history: 13.06.2021 16:23 nmap -sV -sP 172.16.20.0/24 log management: Date: Jun, 13, 2021, 04:23 PM Src_IP 172.16.20.5 Src_port 53222 dest_IP 172.16.20.2 dest_port 22 Email: “Hi all, I will scan the LetsDefend network after 12:00 13.06.2021 This scanning could be continue all day. Please ignore SIEM alerts for “PentestMachine” hostname Hostname: PentestMachine IP Address: 172.16.20.5 Regars, Ellie”\nThe email from the penetration testing team indicated their intention to conduct a network scan after 12 PM. By examining the terminal history of the Pentest machine, we can observe the use of the nmap command to scan a range of IP addresses.\nConclusion The alert is a false positive.\nHeartstone back home\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"302c684e47b6638b5dffa5655fa62e54","permalink":"https://matteogreek.github.io/writeups/letsdefend/soc147/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/writeups/letsdefend/soc147/","section":"writeups","summary":"Alert EventID : 94 Event Time : Jun, 13, 2021, 04:23 PM Rule : SOC147 - SSH Scan Activity Level : Security Analyst Source Address : 172.16.20.5 Source Hostname : PentestMachine File Name : nmap File Hash : 3361bf0051cc657ba90b46be53fe5b36 File Size : 2.","tags":["writeup"],"title":"SOC147 - SSH Scan Activity","type":"writeups"},{"authors":null,"categories":null,"content":"Summary In this alert we investigate a suspicious usage of a Windows binary called certutil.exe. The main focus of this exercise was to learn about LolBins (Living-off-the-land binaries).\nA Living-off-the-land binaries is any binary supplied by the operating system that is normally used for legitimate purposes but can also be abused by malicious actors. Several default system binaries have unexpected side effects, which may allow attackers to hide their activities post-exploitation.\nAlert EventID : 113 Event Time : Mar, 01, 2022, 11:06 AM Rule : SOC163 - Suspicious Certutil.exe Usage Level : Security Analyst Hostname : EricProd IP Address : 172.16.17.22 Related Binary : certutil.exe Binary Path : C:/Windows/System32/certutil.exe Command Line : certutil.exe -urlcache -split -f https://nmap.org/dist/nmap-7.92-win32.zip nmap.zip Alert Trigger Reason : -f parameter with certutil.exe EDR Action : Allowed Detection We can look at the terminal history of the host EricProd which caused the alarm. to be created in “Endpoint Security”. As you can see in the table below “nmap” and the “windows-exploit-suggester” were downloaded.\nEVENT COMMAND LINE 01.03.2021 whoami 01.03.2021 net user 01.03.2021 net user 01.03.2021 ipconfig 01.03.2021 ipconfig /all 01.03.2021 net Localgroup 01.03.2021 net start 01.03.2021 netstat 01.03.2021 tasklist 01.03.2021 systeminfo 01.03.2021 certutil.exe -urlcache -split -f https://nmap.org/dist/nmap-7.92-setup.exe nmap.zip 01.03.2021 certutil.exe -urlcache -split -f https://raw.githubusercontent.com/AonCyberLabs/Windows-Exploit-Suggester/master/windows-exploit-suggester.py check.py 01.03.2021 nmap -sV 192.168.0.0/24 -p 80 01.03.2021 python3 check.py 01.03.2021 arp -a 01.03.2021 findstr /si pass *.txt | *.xml | *.ini 01.03.2021 C:/powershell.exe -nop -exec bypass Analysis By searching was certutil does we discovered that it is considered a legal binary offered by Windows OS. The user run certutil to download a version of nmap and later on he started performing a scan of the internal network. The scan was performed on the subnet: 192.168.0.0/24 looking at services running specifically on port 80.\n$ certutil.exe -urlcache -split -f https://nmap.org/dist/nmap-7.92-setup.exe nmap.zip $ nmap -sV 192.168.0.0/24 -p 80 Conclusion The alert was a true positive. The purpose of suspicious activities performed with legal binaries for this incident was to download the tool called nmap. No malware was detected on the machine so we can assume it has been the user of the system who run the terminal commands.\nHeartstone back home\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"13791b1b753cb8942dcfcd896b8db112","permalink":"https://matteogreek.github.io/writeups/letsdefend/soc163/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/writeups/letsdefend/soc163/","section":"writeups","summary":"Summary In this alert we investigate a suspicious usage of a Windows binary called certutil.exe. The main focus of this exercise was to learn about LolBins (Living-off-the-land binaries).\nA Living-off-the-land binaries is any binary supplied by the operating system that is normally used for legitimate purposes but can also be abused by malicious actors.","tags":["writeup"],"title":"SOC163 - Suspicious Certutil.exe Usage","type":"writeups"},{"authors":null,"categories":null,"content":"Summary This exercise is about a suspicious Chrome extension named “ChatGPT for Google. The alert was triggered due to the suspicious addition of the extension to the browser, indicating a potential security threat. The add-on, disguising as a ChatGPT tool, targeted users’ Facebook profiles. Despite its removal from the Chrome Web Store, many had already installed it, posing concerns about data privacy. Subsequent checks of network activity showed links to harmful websites related to the extension’s C2 framework. These links, combined with data from threat intelligence sources, verified the extension’s malevolent intent and the significant danger it presented to users.\nAlert Severity: High Type: Data Leakage EventID : 153 Event Time : May, 29, 2023, 01:01 PM Rule : SOC202 - FakeGPT Malicious Chrome Extension Level : Security Analyst Hostname : Samuel IP Address : 172.16.17.173 File Name : hacfaophiklaeolhnmckojjjjbnappen.crx File Path : C:\\Users\\LetsDefend\\Download\\hacfaophiklaeolhnmckojjjjbnappen.crx File Hash : 7421f9abe5e618a0d517861f4709df53292a5f137053a227bfb4eb8e152a4669 Command Line : chrome.exe --single-argument C:\\Users\\LetsDefend\\Download\\hacfaophiklaeolhnmckojjjjbnappen.crx Trigger Reason : Suspicious extension added to the browser. Device Action : Allowed From the alert details given, a dubious file has been identified on a system labeled “Samuel” having an IP address of 172.16.17.173. This alert was activated by the SOC202 rule pertaining to the FakeGPT Malicious Chrome Extension. From the provided data, it seems the command line is trying to access or modify a Chrome extension file (having a .crx extension) via the Google Chrome browser. The device’s response is labeled as “allowed”, suggesting that the device didn’t intervene or halt the file’s execution.\nThe file name of the extension added to the browser is: hacfaophiklaeolhnmckojjjjbnappen.crx The file hash is: 7421f9abe5e618a0d517861f4709df53292a5f137053a227bfb4eb8e152a4669\nAnalysis In the following segment, we’ll delve into a comprehensive examination of the flagged malicious extension, utilizing external tools and methods. Moreover, we are going to try to identify the Command and Control (C2) address associated with the malware.\nExtension Analysis Virustotal: No security vendors and no sandboxes flagged this file as malicious MalwareBazaar: No results ChromeStats: https://chrome-stats.com/d/hacfaophiklaeolhnmckojjjjbnappen Using ChromeStats we can find some interesting information. The extension is flagged as malicious and was removed from the Web Store. This is could be a sign that the extension is actually malicious and the alert is a true positive one. By looking at the Browse History of the affected Host “Samuel” using the EDR, we can see that he visited the URL: https://chrome.google.com/webstore/detail/chatgpt-for-google/hacfaophiklaeolhnmckojjjjbnappen at 2023-05-29 13:01:44. Visiting the URL, resulted in a 404 error message. This finding seems to agree with the previous clue obtained with ChromeStats.\nCommand and Control (C2) Identification In this section, we will search for signs of Command and Control (C2) access. Let’s start by analyzing the network-related logs gathered from the “Samuel” Host.\nOn the Log Management tab we can filter by Samuel’s IP address 172.16.17.173. Here we find that the source IP made:\na request to the IP 52.76.101.124 on port 80 on May, 29, 2023, 01:02 PM. By analyzing the raw log entry we can see that the Hostname linked to the destination IP is www.chatgptforgoogle.pro. Another request was made to IP 172.217.17.142 on port 80 on May, 29, 2023, 01:03 PM (1 min after the previous one). By analyzing the raw log entry we can see that the Hostname linked to the destination IP is chrome.google.com Another request was made to IP 18.140.6.45 on port 80 on May, 29, 2023, 01:03 PM (1 min after the previous one). By analyzing the raw log entry we can see that the Hostname linked to the destination IP is www.chatgptgoogle.org A DNS Query was made: QueryResult: ::ffff:104.21.63.166;::ffff:172.67.147.243; QueryName: version.chatgpt4google.workers.dev Further investigation of the domain www.chatgptforgoogle.pro on threat intelligence platforms, such as VirusTotal, confirms its malicious nature.\nConclusion The alert was a true positive and the findings confirm that the Chrome extension is malicious. Furthermore the Host accessed the malicious C2 address and so it was isolated from the network.\nHeartstone back home\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9b35f046da173e2808aea8dc2cceae02","permalink":"https://matteogreek.github.io/writeups/letsdefend/soc202/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/writeups/letsdefend/soc202/","section":"writeups","summary":"Summary This exercise is about a suspicious Chrome extension named “ChatGPT for Google. The alert was triggered due to the suspicious addition of the extension to the browser, indicating a potential security threat.","tags":["writeup"],"title":"SOC202 - FakeGPT Malicious Chrome Extension","type":"writeups"}]